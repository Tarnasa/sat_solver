"""
Creates a plot given fitness data
"""

# Built-ins
import argparse
import re
import itertools

# Third party
import matplotlib.pyplot

parser = argparse.ArgumentParser(description='Generates plots from log files generated by run.py')

parser.add_argument('--log', '-l', dest='log', type=argparse.FileType('r'), required=True,
                    help='The name of the log file used to generate the plot.')
parser.add_argument('--out', '-o', dest='out', default=None, required=False,
                    help='The name of the generated plot file (Can be .png or .pdf).  '
                    'Defaults to just showing the plot.')
parser.add_argument('--title', '-t', dest='title', default=None, type=str, required=False,
                    help='The title to display at the top of the plot.  Defaults to the name of the CNF file.')

args = parser.parse_args()

# Separate runs
runs = re.split(r'\r?\nRun [0-9]+\r?\n', args.log.read())
diversity_runs = re.split(r'\r?\nRun [0-9]+\r?\n', open(args.log.name.replace('.log', '.diversity')).read())

# Find info from log header
if not args.title:
    args.title = re.search(r'CNF[^:\n]+: ([^\r\n]+)', runs[0], flags=re.IGNORECASE).group(1)
max_evaluations = int(re.search('eval[^:\n]+: ([0-9]+)', runs[0], flags=re.IGNORECASE).group(1))

# Prepare data
evals_values = list()
average_values = list()
best_values = list()
average_values2 = list()
best_values2 = list()
diversities = list()
for run_index, run in enumerate(runs[1:]):
    diversity_lines = filter(None, list(re.split(r'\r?\n', diversity_runs[run_index + 1])))
    for line_index, line in enumerate(itertools.ifilter(None, re.split(r'\r?\n', run))):
        evals, average, best, average2, best2 = re.match(r'([0-9]+)\t([0-9.]+)\t([0-9.]+)\t([0-9.]+)\t([0-9.]+)',
                                                         line).groups()
        evals = int(evals)
        average = float(average)
        best = float(best)
        average2 = float(average2)
        best2 = float(best2)
        if run_index == 0:
            evals_values.append(evals)
            average_values.append(list())
            best_values.append(list())
            average_values2.append(list())
            best_values2.append(list())
            diversities.append(list())
        average_values[line_index].append(average)
        best_values[line_index].append(best)
        average_values2[line_index].append(average2)
        best_values2[line_index].append(best2)
        diversities[line_index].append(float(diversity_lines[line_index].strip()))


def plot_fitness_vs_evals(averages, bests, average_color, best_color, average_line_format, best_line_format,
                          fitness_name):
    # Plot everything
    figure = matplotlib.pyplot.figure()
    big = figure.add_subplot(1, 1, 1)

    box_step_size = len(average_values) / 10
    box_width = evals_values[-1] / 17.0

    def box_and_average_plot(values, color, line_format):
        # Plot box plot
        box = big.boxplot([x for x in values[::box_step_size]], positions=evals_values[::box_step_size],
                          labels=[[str(x), ''][i % 2] for i, x in enumerate(evals_values[::box_step_size])],
                          widths=box_width)
        matplotlib.pyplot.setp(box['boxes'], color=color)

        # Plot average of values line
        big.plot(evals_values, [sum(a) / float(len(a)) for a in values], line_format)

    box_and_average_plot(averages, average_color, average_line_format)
    box_and_average_plot(bests, best_color, best_line_format)

    # Setup dimensions
    big.set_xlim(0, evals_values[-1] * 1.05)
    #big.set_ylim(min(x[0] for x in averages) * 0.95, max(x[-1] for x in bests) * 1.05)
    big.set_ylim(min(min(x for x in column) for column in averages) * 0.95,
                 max(max(x for x in column) for column in bests) * 1.05)

    matplotlib.pyplot.title('{0} vs. Evaluations for {1}'.format(fitness_name, args.title))
    matplotlib.pyplot.xlabel('Evaluations')
    matplotlib.pyplot.ylabel(fitness_name)

    if args.out:
        out_name = args.out.split('.')[0] + '-' + fitness_name.replace(' ', '_') + '-' + args.out.split('.')[-1]
        figure.savefig(out_name)
    else:
        matplotlib.pyplot.show()


def plot_fitness_vs_evals_single(averages, average_color, average_line_format, name):
    # Plot everything
    figure = matplotlib.pyplot.figure()
    big = figure.add_subplot(1, 1, 1)

    box_step_size = len(average_values) / 10
    box_width = evals_values[-1] / 17.0

    def box_and_average_plot(values, color, line_format):
        # Plot box plot
        box = big.boxplot([x for x in values[::box_step_size]], positions=evals_values[::box_step_size],
                          labels=[[str(x), ''][i % 2] for i, x in enumerate(evals_values[::box_step_size])],
                          widths=box_width)
        matplotlib.pyplot.setp(box['boxes'], color=color)

        # Plot average of values line
        big.plot(evals_values, [sum(a) / float(len(a)) for a in values], line_format)

    box_and_average_plot(averages, average_color, average_line_format)

    # Setup dimensions
    big.set_xlim(0, evals_values[-1] * 1.05)
    #big.set_ylim(min(x[0] for x in averages) * 0.95, max(x[-1] for x in averages) * 1.05)
    big.set_ylim(min(min(x for x in column) for column in averages) * 0.95,
                 max(max(x for x in column) for column in averages) * 1.05)

    matplotlib.pyplot.title('{0} vs. Evaluations for {1}'.format(name, args.title))
    matplotlib.pyplot.xlabel('Evaluations')
    matplotlib.pyplot.ylabel(name)

    if args.out:
        out_name = args.out.split('.')[0] + '-' + name.replace(' ', '_') + '-' + args.out.split('.')[-1]
        figure.savefig(out_name)
    else:
        matplotlib.pyplot.show()

plot_fitness_vs_evals(average_values, best_values, 'red', 'blue', 'r--', 'b--', 'MAXSAT')
plot_fitness_vs_evals(average_values2, best_values2, 'yellow', 'cyan', 'y--', 'c--', 'Robustness')
plot_fitness_vs_evals_single(diversities, 'magenta', 'm--', 'Diversity')
